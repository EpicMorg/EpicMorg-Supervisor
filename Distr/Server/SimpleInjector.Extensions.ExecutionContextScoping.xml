<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleInjector.Extensions.ExecutionContextScoping</name>
    </assembly>
    <members>
        <member name="T:SimpleInjector.Extensions.ExecutionContextScoping.ExecutionContextScopeLifestyle">
            <summary>
            Defines a lifestyle that caches instances during the lifetime of an explicitly defined scope using the
            <see cref="M:SimpleInjector.Extensions.ExecutionContextScoping.SimpleInjectorExecutionContextScopeExtensions.BeginExecutionContextScope(SimpleInjector.Container)">BeginExecutionContextScope</see>
            method. An execution context scope flows with the logical execution context. Scopes can be nested and
            nested scopes will get their own instance. Instances created by this lifestyle can be disposed when 
            the created scope gets disposed. 
            </summary>
            <example>
            The following example shows the usage of the <b>ExecutionContextScopeLifestyle</b> class:
            <code lang="cs"><![CDATA[
            var container = new Container();
            
            container.Register<IUnitOfWork, EntityFrameworkUnitOfWork>(new ExecutionContextScopeLifestyle());
            
            using (container.BeginExecutionContextScope())
            {
                var instance1 = container.GetInstance<IUnitOfWork>();
                // ...
            }
            ]]></code>
            </example>
        </member>
        <member name="M:SimpleInjector.Extensions.ExecutionContextScoping.ExecutionContextScopeLifestyle.#ctor">
            <summary>Initializes a new instance of the <see cref="T:SimpleInjector.Extensions.ExecutionContextScoping.ExecutionContextScopeLifestyle"/> class.
            The created and cached instance will be disposed when the created 
            <see cref="T:SimpleInjector.Scope"/> instance gets disposed and when the created object implements 
            <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="M:SimpleInjector.Extensions.ExecutionContextScoping.ExecutionContextScopeLifestyle.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:SimpleInjector.Extensions.ExecutionContextScoping.ExecutionContextScopeLifestyle"/> class.</summary>
            <param name="disposeInstanceWhenScopeEnds">
            Specifies whether the created and cached instance will be disposed when the created 
            <see cref="T:SimpleInjector.Scope"/> instance gets disposed and when the created object implements 
            <see cref="T:System.IDisposable"/>. 
            </param>
        </member>
        <member name="M:SimpleInjector.Extensions.ExecutionContextScoping.ExecutionContextScopeLifestyle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleInjector.Extensions.ExecutionContextScoping.ExecutionContextScopeLifestyle"/> class.
            </summary>
            <param name="name">The user friendly name of this lifestyle.</param>
        </member>
        <member name="M:SimpleInjector.Extensions.ExecutionContextScoping.ExecutionContextScopeLifestyle.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleInjector.Extensions.ExecutionContextScoping.ExecutionContextScopeLifestyle"/> class.
            </summary>
            <param name="name">The user friendly name of this lifestyle.</param>
            <param name="disposeInstanceWhenScopeEnds">
            Specifies whether the created and cached instance will be disposed when the created.</param>
        </member>
        <member name="T:SimpleInjector.Extensions.ExecutionContextScoping.SimpleInjectorExecutionContextScopeExtensions">
            <summary>
            Extension methods for enabling execution context scoping for the Simple Injector.
            </summary>
        </member>
        <member name="M:SimpleInjector.Extensions.ExecutionContextScoping.SimpleInjectorExecutionContextScopeExtensions.BeginExecutionContextScope(SimpleInjector.Container)">
             <summary>
             Begins a new execution context scope for the given <paramref name="container"/>. 
             Services, registered using the <see cref="T:SimpleInjector.Extensions.ExecutionContextScoping.ExecutionContextScopeLifestyle"/> are cached during the 
             lifetime of that scope. The scope should be disposed explicitly.
             </summary>
             <param name="container">The container.</param>
             <returns>A new <see cref="T:SimpleInjector.Scope"/> instance.</returns>
             <exception cref="T:System.ArgumentNullException">
             Thrown when the <paramref name="container"/> is a null reference.</exception>
             <example>
             <code lang="cs"><![CDATA[
             using (container.BeginExecutionContextScope())
             {
                 var handler container.GetInstance(rootType) as IRequestHandler;
            
                 handler.Handle(request);
             }
             ]]></code>
             </example>
        </member>
        <member name="M:SimpleInjector.Extensions.ExecutionContextScoping.SimpleInjectorExecutionContextScopeExtensions.GetCurrentExecutionContextScope(SimpleInjector.Container)">
            <summary>
            GetCurrentExecutionContextScope has been deprecated. This method throws an exception.
            </summary>
            <param name="container">The container.</param>
            <returns>This method throws an exception.</returns>
        </member>
    </members>
</doc>
